package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"
	"go-ent-spike/ent"
	"go-ent-spike/ent/user"
	"go-ent-spike/graph/model"

	"github.com/google/uuid"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *string, first *int, before *string, last *int, orderBy *model.UserOrder, where *model.UserWhereInput) (*model.UserConnection, error) {
	// このコードを生成したい
	usersQuery := r.client.User.Query()

	if where != nil {
		if where.Name != nil {
			usersQuery = usersQuery.Where(user.NameEQ(*where.Name))
		}
		if where.Age != nil {
			usersQuery = usersQuery.Where(user.AgeEQ(*where.Age))
		}
	}

	if after != nil {
		afterid, err := uuid.Parse(*after)
		if err != nil {
			return nil, err
		}
		usersQuery = usersQuery.Where(user.IDGT(afterid))
	}

	if before != nil {
		beforeid, err := uuid.Parse(*before)
		if err != nil {
			return nil, err
		}
		usersQuery = usersQuery.Where(user.IDLT(beforeid))
	}

	users, err := usersQuery.All(ctx)
	if err != nil {
		return nil, err
	}

	userConnection := &model.UserConnection{
		Edges: []*model.UserEdge{},
	}

	for _, user := range users {
		userConnection.Edges = append(userConnection.Edges, &model.UserEdge{
			Node: &model.User{
				ID:   user.ID.String(),
				Name: user.Name,
				Age:  user.Age,
			},
		})
	}

	return userConnection, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
